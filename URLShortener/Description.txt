{"Text":"<p><strong>1)Get a long URL:</strong> We obtain a long URL from the obj.Url object and store it in the longUrl variable.</p>\r\n<p><strong>2)Get Short URLs</strong>: Get all the short URLs (stored in shortenedUrlCollection) from a database or other data source.</p>\r\n<p><strong>3)Checking for a long URL: We</strong> search the collection of short URLs for one that matches the long URL we got in the previous step.If such a short URL already exists, skip to step 5.</p>\r\n<p><strong>4)Generating a new short URL:</strong> If a short URL for a long URL is not found, we create a new \"shortCode\" (short identifier) using&nbsp;the&nbsp;ShortId.Generate library with additional parameters specifying the length of the code (9 characters in this case) . After that, we create a short URL (obj.ShortedUrl) using the created short code and the base URL of the service (ServiceUrl). We also store the created short code in the obj.ShortCode property.</p>\r\n<p><strong>5)Handling pre-existing long URL</strong>: If a short URL is found for a long URL, add an error to ModelState to indicate that the long URL already exists in the system and we cannot create a new short URL for her.</p>\r\n<p><strong>Unfortunately, it works partially, it is possible to go to a new link only on the websiteðŸ˜°.</strong></p>\r\n<p>&nbsp;</p>","Title":"URLShortener","Author":"Bohdan"}